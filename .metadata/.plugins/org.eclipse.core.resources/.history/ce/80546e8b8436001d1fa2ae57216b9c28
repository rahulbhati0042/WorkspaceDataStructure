package com.subarray;

public class MaxLength_SecondApproach_FromTwoArray {
	static int x[] = { 65, 66, 67, 68,80,90 };
	static int y[] = { 66, 90, 68,90 };
	int maxSS = 0;
	int tmpX[] = new int[x.length];
	int tmpXi = 0;
	static int copies = 0;
	static int lenX = x.length;
	static int lenY = y.length;

	int XEP, e, j, numX, upperBoundX;
	int YEP, numY, upperBoundY;

	int tmpY[] = new int[y.length];
	int tmpYi = 0;

	public static void main(String[] args) {
		System.out.println("Length of Longest Common Sequence  is "
				+ getLengthOfLCS());
		System.out.println("Number of copies generated :" + copies);
	}

	static int getLenOfLCS(int e, int f) {
		int leftSide, rightSide;
		copies++;
		if (e == lenX || f == lenY)
			return 0;
		if (x[e] == y[f])
			return 1 + getLenOfLCS(e + 1, f + 1);
		leftSide = getLenOfLCS(e + 1, f);
		rightSide = getLenOfLCS(e, f + 1);
		return (leftSide > rightSide) ? leftSide : rightSide;
	}

	static int getLengthOfLCS() {
		return getLenOfLCS(0, 0);
	}
}
