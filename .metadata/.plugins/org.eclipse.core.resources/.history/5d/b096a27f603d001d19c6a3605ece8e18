package com.palindrome;

import java.util.Arrays;

public class Palindrome_SubString_DynamicProgramming {
	public static void main(String[] args) {
		char str[] = { 'a', 'c', 'c', 'a', 'c', 'c' };
		int len = str.length;
		int sp = 0, ep = 0;
		char[][] store = new char[len][len];
		sp = len - 1;
		// Case-1 when Length is 1
		while (ep < len) {

			// when len =0
			if (ep == 0) {
				sp = len - 1;
				while (sp > 0) {
					int f = sp;
					int e = ep;
					while (f < len) {
						store[f][e] = 'F';
						f++;
						e++;
					}
					sp--;
				}
				
			} else if (ep - sp == 1) {

			} else if (ep - sp > 1) {

			}else if (ep == sp) {
				store[sp][ep] = 'T';
				sp++;
			}

			ep++;
		}

		for (int k = 0; k < store.length; k++)
			System.out.println(Arrays.toString(store[k]));

	}
}
