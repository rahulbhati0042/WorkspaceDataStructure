package com.mergesort;

import java.util.Arrays;

public class MergeSort {
	public static void main(String[] args) {
		int[] tmp=new int[10];
		int i1,i2,i3;
		int a,b;
		int mid;
		int top1,top2;
		int lb1,lb2,lb3;
		int ub1,ub2,ub3;
		
		int y;
		int x[] = { 9, 4, 7, 6, 3, 1, 5, 8, 10 };
		int[][] stack1=new int[10][2];
		int[][] stack2=new int[10][2];
		top1 = 10; // stack-1
		top2 = 10; // stack -2
		System.out.println("Unsorted Array :"+Arrays.toString(x));

		//push lowerbund and upperbound on stack1
		top1--;
		stack1[top1][0]=0;
		stack1[top1][1]=9;
		while(top1!=10) //stack-1 should not be empty
		{
			//pop from stack 1 into a,b
			a = stack1[top1][0];
			b = stack1[top1][1];
			top1++;
			// push a,b on stack 2
			top2--;
			stack2[top2][0]=a;
			stack2[top2][1]=b;
			//calculate mid
			mid =  (a+b)/2;
			if(a<mid) // push on stack1
			{
				top1--;
				stack1[top1][0]=a;
				stack1[top1][1]=mid;
			}
			if(mid+1<b) // push on stack1
			{
				top1--;
				stack1[top1][0]=mid+1;
				stack1[top1][1]=b;
			}
		}
		while(top2!=10)// stack 2 should not empty
		{
			//pop from stack2
			lb1 = stack2[top2][0];
			ub2 = stack2[top2][1];
			top2++;
			ub1 =(lb1+ub2)/2;
			lb2 = ub1+1;
			//logic to merge starts here
			lb3 = lb1;
			ub3 = ub2;
			i1= lb1;
			i2 = lb2;
			i3 = lb3;
			while((i1<= ub1) && (i2<=ub2)){
				if(x[i1]<x[i2]){
					tmp[i3]= x[i1];
					i1++;
				}else{
					tmp[i3]=x[i2];
					i2++;
				}
				i3++;
				}
			while(i1<=ub1){
				tmp[i3]=x[i1];
				i1++;
				i3++;
			}
			while(i2<=ub2){
				tmp[i3]=x[i2];
				i2++;
				i3++;
			}
			//copy back to the original array
			i3=lb3;
			while(i3<=ub3){
				x[i3]=tmp[i3];
				i3++;
			}
			
		}
		System.out.println("Sorted Array :"+Arrays.toString(x));
	}
}
