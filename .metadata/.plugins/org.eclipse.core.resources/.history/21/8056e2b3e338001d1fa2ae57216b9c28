package com.knapsack;

public class KnapshakBounded_Matrix_Approach {
	static int numberOfCopies=0;
	public static void main(String[] args) {

		int weightArray[] = { 1,5,3,7 };
		int valueArray[] = { 5,2,1,6 };
		int size = weightArray.length;
		int capacity = 7;
		int store[][] = new int[size+1 ][capacity+1 ];
	}

	public static int getKnapsackFillValue(int weightArray[], int valueArray[],
			int size, int capacity) {
		return getKnapsack(weightArray, valueArray, size, capacity, 0);
	}

	private static int getKnapsack(int[] weightArray, int[] valueArray,
			int size, int capacity, int index) {
		int value1, value2, maxValue;
		if (capacity <= 0 || index >= size)
			return 0;
		numberOfCopies++;
		value1 = 0;
		if (weightArray[index] <= capacity)
			value1 = valueArray[index]
					+ getKnapsack(weightArray, valueArray, size, capacity
							- weightArray[index], index + 1);

		value2 = getKnapsack(weightArray, valueArray, size, capacity, index + 1);
		maxValue = Math.max(value1, value2);
		return maxValue;
	}
}
