package com.bst;

import java.util.LinkedList;
import java.util.Queue;

public class List_Common_Insister_LCA {
	static Node root;
	static int levels = 0;
	static Queue<Integer> q1 = new LinkedList<Integer>();
	static Queue<Integer> q2 = new LinkedList<Integer>();
	static int lastRemovedElements = 0;

	public static void main(String[] args) {
		int arr[] = { 10, 8, 15, 7, 9, 14, 16, 18 };
		for (int i = 0; i < arr.length; i++)
			insertion(arr[i]);
		addInQ1(root, 16);
		addInQ2(root, 14);
		lastRemovedElements = getLCA(root);
		System.out.println("LCA Of BST: " + lastRemovedElements);
	}

	public static void addInQ1(Node t, int target) {
		if (t == null)
			return;
		if (t.data == target) {
			q1.add(t.data);
			return;
		}
		q1.add(t.data);
		addInQ1(t.left, target);
		addInQ1(t.right, target);

	}

	public static void addInQ2(Node t, int target) {
		if (t == null)
			return;
		if (t.data == target) {
			q2.add(t.data);
			return;
		}
		q2.add(t.data);
		addInQ2(t.left, target);
		addInQ2(t.right, target);

	}

	private static int getLCA(Node root) {
		// TODO Auto-generated method stub
		if (root == null)
			return 0;
		if (!q1.isEmpty() && !q2.isEmpty()) {
			int a = q1.poll();
			int b = q2.poll();

			if (a == b) {
				lastRemovedElements = root.data;
				getLCA(root.left);
				getLCA(root.right);
			}
			return lastRemovedElements;
		}
		return lastRemovedElements;

	}

	public static void insertion(int data) {
		Node n = new Node();
		n.data = data;
		n.left = n.right = null;
		if (root == null) {
			root = n;
			return;
		}
		Node j = root;
		while (true) {
			if (j.data > n.data) {
				if (j.left == null) {
					j.left = n;
					break;
				} else
					j = j.left;

			} else {
				if (j.right == null) {
					j.right = n;
					break;
				} else
					j = j.right;
			}
		}

	}

}
